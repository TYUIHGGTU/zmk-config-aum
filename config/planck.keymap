#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// / {
//     chosen {
//         zmk,physical-layout = &matrix_physical_layout;
//     };
// };

/ {
    combos {
        compatible = "zmk,combos";

        moBT {
            bindings = <&mo 2>;
            key-positions = <40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            // |   ESC   |    Q    |    W    |    E    |    R    |    T    |                                          |    Y    |    U    |    I    |    O    |    P    |    \    |
            // |   TAB   |    A    |    S    |    D    |    F    |    G    |                                          |    H    |    J    |    K    |    L    |    ;    |    '    |
            // |  SHIFT  |    Z    |    X    |    C    |    V    |    B    | CTRL+A  | CTRL+C  |  |  CTRL+V |  CTRL+X |    N    |    M    |    ,    |    .    |    /    |  R CTRL |
            //                               |   GUI   |   DEL   | RETURN  |  SPACE  | ESCAPE  |  |  RETURN |  SPACE  |   TAB   |   BSPC  |  R ALT  |

            bindings = <
&kp ESC       &kp Q  &kp W      &kp E     &kp R     &kp T      &kp Y  &kp U  &kp I      &kp O      &kp P     &kp BACKSPACE
&kp CAPSLOCK  &kp A  &kp S      &kp D     &kp F     &kp G      &kp H  &kp J  &kp K      &kp L      &kp SEMI  &kp RETURN
&kp LSHFT     &kp Z  &kp X      &kp C     &kp V     &kp B      &kp N  &kp M  &kp COMMA  &kp DOT    &kp FSLH  &kp BSLH
                     &kp LCTRL  &kp RALT  &kp LGUI  &kp SPACE  &mo 1  &mo 2  &kp RALT   &kp RCTRL
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        layer_1 {
            bindings = <
&kp ESC    &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp GRAVE
&kp TAB    &kp N1        &kp N2      &kp N3         &kp N4        &kp N5         &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &kp RET
&kp LSHFT  &kp MINUS     &kp EQUAL   &kp LBKT       &kp LS(LBRC)  &kp LS(LPAR)   &kp LS(RPAR)   &trans        &kp SQT       &kp COMMA     &kp DOT       &kp FSLH
                         &kp BSLH    &trans         &trans        &trans         &trans         &trans        &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
&kp ESC    &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp PG_UP  &kp UP     &kp PG_DN  &kp HOME  &kp GRAVE
&kp TAB    &kp N1        &kp N2      &kp N3         &kp N4        &kp N5         &kp N6         &kp LEFT   &kp DOWN   &kp RIGHT  &kp END   &kp RET
&kp LSHFT  &kp MINUS     &kp EQUAL   &kp LBKT       &kp LS(LBRC)  &kp LS(LPAR)   &kp LS(RPAR)   &kp SQT    &kp COMMA  &kp DOT    &kp FSLH  &kp BSLH
                         &trans      &trans         &trans        &trans         &trans         &trans     &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3    &bt BT_SEL 4   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3   &bt BT_DISC 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_PRV     &bt BT_NXT     &bt BT_CLR     &bt BT_CLR_ALL  &trans         &trans  &trans  &trans  &trans  &trans  &trans
                       &trans         &trans         &trans          &trans         &trans  &trans  &trans  &trans
            >;
        };
    };
};
